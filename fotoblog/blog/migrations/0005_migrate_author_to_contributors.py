# Generated by Django 4.2.13 on 2024-06-26 20:50

from django.db import migrations, models


def migrate_author_to_contributors(apps, schema_migration):
    """migrate data from the old ManyToOne(ForeignKey) relationship to a ManyToMany relationship"""

    # Retrieve models using the apps.get_model() function
    Blog = apps.get_model('blog', 'Blog')
    # BlogContributor = apps.get_model('blog', 'BlogContributor')

    # recover the instances(Blog)
    blogs = Blog.objects.all()
    for blog in blogs:
        # Check if a contributor already exists for this author and blog
        if blog.author:  # Make sure the author isn't nul

            # contributor, created = BlogContributor.objects.get_or_create(
            #     contributor_id=blog.author_id, blog_id=blog.id,
            #     through_defaults={'contribution': 'Auteur principal'})
            # blog.contributors.add(contributor)

            # Add the author value to contributors, with a default contribution de 'Auteur principal'
            blog.contributors.add(blog.author, through_defaults={'contribution': 'Auteur principal'})


class Migration(migrations.Migration):
    dependencies = [
        ("blog", "0004_blogcontributor_blog_contributors"),
    ]

    operations = [
        # add the migrate_author_to_contributors function as an argument to the migrations.RunPython class
        migrations.RunPython(migrate_author_to_contributors),


        # # remove the author field from Blog can let after migration this one

        # migrations.RemoveField(
        #     model_name='blog',
        #     name='author',
        # ),
    ]
